<%
  @menu_path = '/changes/menu'
%>

<h1><%= page_title 'Upgrading Unpoly' %></h1>

<div class="prose">
  <p>
    New Unpoly releases will occasionally rename or remove an existing function, event or HTML attribute.
  </p>

  <p>
    To <b>re-enable old APIs</b>, load the file <code>unpoly-migrate.js</code> that ships with
    Unpoly 2 or higher:
  </p>

  <table>
    <tr>
      <th>Development</th>
      <th colspan="2">Production</th>
    </tr>
    <tr>
      <td>
        <%= link_to_cdn_file('unpoly-migrate.js') %>
      </td>
      <td>
        <%= link_to_cdn_file('unpoly-migrate.min.js') %>
      </td>
      <td align="right" class="dimmed">
        <%= unpoly_library_size('unpoly-migrate.min.js') %> gzipped
      </td>
    </tr>
  </table>

  <p>
    By loading <code>unpoly-migrate.js</code>, calls to most old APIs will be forwarded to the
    new version. A deprecation notice will be logged to your browser console.
    This way you can upgrade Unpoly, revive your application with a few changes,
    then replace deprecated API calls under green tests.
  </p>

  <%= image_tag 'changes/log-deprecation.png', class: 'picture has_border is_sepia', width: 700 %>

  <h3>Installing <code>unpoly-migrate.js</code></h3>

  <code>unpoly-migrate.js</code> must be loaded <i>after</i> Unpoly, but <i>before</i> your own code. For example:

  <pre><code>&lt;script src="unpoly.js"&gt;
&lt;script src="unpoly-migrate.js"&gt;
&lt;script src="app.js"&gt;</code></pre>

  <h3>What <code>unpoly-migrate.js</code> does</h3>

  <h4>Removed functions are polyfilled</h4>

  <p>
    If a function was removed without replacement, <code>unpoly-migrate.js</code> will provide a polyfill.
  </p>

  <p>
    E.g. Unpoly no longer supports <code>up.util.times()</code>, but the function is
    re-added by <code>unpoly-migrate.js</code>.
  </p>

  <h4>Renamed functions are aliased</h4>

  <p>
    Calls to deprecated functions will be forwarded if there is an equivalent function
    in the current version.
  </p>

  <p>
    E.g. <code>up.modal.close()</code> will call <code>up.layer.dismiss()</code>.
  </p>

  <h4>Renamed options are aliased</h4>

  <p>
    Usage of deprecated options will be rewritten if there is an equivalent option
    in the current version.
  </p>

  <p>
    E.g. <code>{ reveal: false }</code> will be renamed to <code>{ scroll: false }</code>.
  </p>

  <h4>Renamed packages are aliased</h4>

  <p>
    Usage of deprecated pcakages will be rewritten if there is an equivalent packages
    in the current version.
  </p>

  <p>
    E.g. <code>up.proxy.config</code> will return <code>up.network.config</code>.
  </p>

  <p>
    Occasionally a package will be removed
  </p>

  <h4>Renamed HTML attributes are aliased</h4>

  <p>
    E.g. <code>&lt;a up-close&gt;</code> will translate to <code>&lt;a up-dismiss&gt;</code>
  </p>

  <h4>Renamed events are aliased</h4>

  <p>
    E.g.
    <code>up.on('up:proxy:load')</code> will bind to <code>up:request:load</code>.
  </p>

  <p>
    Note that event aliases are only used when registering listeners with <a href="/up.on"><code>up.on()</code></a>,
    but not with the native <code>Element#addEventListener()</code>.
  </p>

  <h3>Detecting use of deprecated APIs with automated tests</h3>

  <p>
    If your app has good test coverage you can configure <code>unpoly-migrate.js</code>
    to log an <em>error</em> (instead of a warning) whenever a deprecated API is called:
  </p>

  <pre><code>up.migrate.config.logLevel = 'error'</code></pre>

  <p>
    You can now detect which code needs to be upgraded by following test failures.
  </p>

  <% admonition(:tip) do %>
    <p>
      Your E2E tests can
      <a href="https://makandracards.com/makandra/55056-raising-javascript-errors-in-cucumber-scenarios-and-how-to-silence-them-for-particular-scenarios">check if the browser console shows an error</a>
      using the Selenium API.
    </p>
  <% end %>

</div>
